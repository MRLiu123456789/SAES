# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

from CBC_decrypt import CBC_decrypt
from CBC_encrypt import CBC_encrypt
from decrypt import decrypt
from encrypt import encrypt

from new import hello
from re_decrypt import re_decrypt
from re_encrypt import re_encrypt
from tri_encrypt import tri_encrypt
from  tri_decrypt import  tri_decrypt


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(70, 160, 201, 71))
        self.label.setStyleSheet("font-size: 12pt;color: blue;")
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(440, 180, 181, 51))
        self.label_2.setStyleSheet("font-size: 12pt;color: red;")
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(10, 220, 41, 41))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(10, 270, 41, 41))
        self.label_4.setObjectName("label_4")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(60, 230, 300, 20))
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setGeometry(QtCore.QRect(60, 280, 300, 20))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(60, 320, 75, 23))
        self.pushButton.setObjectName("pushButton")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(400, 240, 51, 31))
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(400, 280, 51, 21))
        self.label_6.setObjectName("label_6")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_3.setGeometry(QtCore.QRect(460, 240, 300, 20))
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.lineEdit_4 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_4.setGeometry(QtCore.QRect(460, 280, 300, 20))
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(450, 330, 75, 23))
        self.pushButton_2.setObjectName("pushButton_2")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.pushButton.clicked.connect(MainWindow.jiami)  # type: ignore
        self.pushButton_2.clicked.connect(MainWindow.jiemi)  # type: ignore
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "加密系统"))
        self.label_2.setText(_translate("MainWindow", "解密系统"))
        self.label_3.setText(_translate("MainWindow", "明文:"))
        self.label_4.setText(_translate("MainWindow", "密钥:"))
        self.pushButton.setText(_translate("MainWindow", "加密"))
        self.label_5.setText(_translate("MainWindow", "密文:"))
        self.label_6.setText(_translate("MainWindow", "密钥:"))
        self.pushButton_2.setText(_translate("MainWindow", "解密"))


class JiamiWindow(QtWidgets.QDialog):
    def __init__(self, text, key):
        super().__init__()
        self.setWindowTitle("加密结果")
        self.setGeometry(100, 100, 800, 600)  # 调整窗口大小

        # 创建标签用于显示加密结果
        self.label = QtWidgets.QLabel(self)
        self.label.setGeometry(QtCore.QRect(50, 50, 600, 200))  # 调整标签大小
        self.label.setStyleSheet("font-size: 12pt;")
        self.label.setText(f"加密结果：{text} 密钥：{key}")

        self.exec()


class JiemiWindow(QtWidgets.QDialog):
    def __init__(self, text, key):
        super().__init__()
        self.setWindowTitle("解密结果")
        self.setGeometry(100, 100, 800, 600)  # 调整窗口大小

        # 创建标签用于显示解密结果
        self.label = QtWidgets.QLabel(self)
        self.label.setGeometry(QtCore.QRect(50, 50, 600, 200))  # 调整标签大小
        self.label.setStyleSheet("font-size: 12pt;")
        self.label.setText(f"解密结果：{text} 密钥：{key}")

        self.exec()


class MainWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()

        # 创建UI界面
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)
        self.setWindowTitle("S-AES密码系统")

    def jiami(self):
        #CBC
        plaintext = str(self.ui.lineEdit.text())
        key = int(self.ui.lineEdit_2.text(), 16)
        binary_key = hex(key)
        ciphertext = CBC_encrypt(plaintext, key)
        print(ciphertext)
        jiami_window = JiamiWindow(ciphertext, binary_key)


        '''
        #三重加密
        plaintext = int(self.ui.lineEdit.text(), 16)
        key = int(self.ui.lineEdit_2.text(), 16)
        binary_key = hex(key)
        ciphertext = tri_encrypt(plaintext, key)
        jiami_window = JiamiWindow(ciphertext, binary_key)
        '''

        '''
        #二重加密
        plaintext = int(self.ui.lineEdit.text(), 16)
        key = int(self.ui.lineEdit_2.text(), 16)
        binary_key = hex(key)
        ciphertext = re_encrypt(plaintext, key)
        jiami_window = JiamiWindow(ciphertext, binary_key)
        '''

        '''
        #基本测试加密
        plaintext = int(self.ui.lineEdit.text(), 2)
        key = int(self.ui.lineEdit_2.text(), 2)
        binary_key = bin(key)
        ciphertext = encrypt(plaintext, key)
        jiami_window = JiamiWindow(ciphertext, binary_key)
        '''


    def jiemi(self):

        #CBC
        ciphertext = str(self.ui.lineEdit_3.text())
        key = int(self.ui.lineEdit_4.text(), 16)
        binary_key1 = hex(key)
        plaintext = CBC_decrypt(ciphertext, key)
        jiemi_window = JiemiWindow(plaintext, binary_key1)
        '''
        #三重解密
        ciphertext = int(self.ui.lineEdit_3.text(), 16)
        key = int(self.ui.lineEdit_4.text(), 16)
        binary_key1 = hex(key)
        plaintext = tri_decrypt(ciphertext, key)
        jiemi_window = JiemiWindow(plaintext, binary_key1)
        '''

        '''
        #二重解密
        ciphertext = int(self.ui.lineEdit_3.text(), 16)
        key = int(self.ui.lineEdit_4.text(), 16)
        binary_key1 = hex(key)
        plaintext = re_decrypt(ciphertext, key)
        jiemi_window = JiemiWindow(plaintext, binary_key1)
        '''

        '''
        基本测试解密
        ciphertext = int(self.ui.lineEdit_3.text(), 2)
        key = int(self.ui.lineEdit_4.text(), 2)
        binary_key1 = bin(key)[2:]
        plaintext = decrypt(ciphertext, key)
        jiemi_window = JiemiWindow(plaintext, binary_key1)
        '''

if __name__ == "__main__":
    import sys
    from PyQt5 import QtWidgets

    app = QtWidgets.QApplication(sys.argv)
    main_window = MainWindow()
    main_window.show()
    sys.exit(app.exec_())
